<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app version="2.5" 
	xmlns="http://java.sun.com/xml/ns/javaee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
  <display-name>Archetype Created Web Application</display-name>
  <listener>
  	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  
  <!-- 指定加载Spring的核心配置文件 -->
 	
	  <context-param>
	  <!-- contextConfigLocation这个名字写死 -->
	  <param-name>contextConfigLocation</param-name>
	  <!-- applicationContext*.xml *别落了 -->
	  <param-value>classpath:spring/applicationContext*.xml</param-value>
	  </context-param>
	  
	
  <!-- 编码过滤器，以UTF8编码 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
  
	<!-- 配置shiro的Filter -->
	<filter>
	
		<filter-name>shiroFilter</filter-name>
		<!-- 这个类，是spring根据配置文件bean id的名字来生成filter的代理类 -->
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
		<!-- spring 生成filter代理类之后，这个代理类的生命周期默认是spring来管理的
		为了让filter生效，我们需要把这个filter交给servlet容器来管理 -->
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
  
  <!-- 配置SpringMVC核心入口类 -->
	<servlet>
	<servlet-name>smvc</servlet-name>
	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring/springmvc-config.xml</param-value>
		</init-param>
		<!-- 如果想让Servlet在容器的启动的时候就开始工作，
		<load-on-startup>1</load-on-startup>
		数字的含义：只要数字大于0，就是表示随容器启动而启动 -->
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>smvc</servlet-name>
		<!-- /拦截所有请求 -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<filter>
		<filter-name>logFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		 <init-param>
        <!-- invoke lifecycle methods -->
        <param-name>targetFilterLifecycle</param-name>
        <param-value>true</param-value>
        </init-param>
	</filter>
	<filter-mapping>
		<filter-name>logFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<welcome-file-list>
	<welcome-file>/index1.jsp</welcome-file>
	</welcome-file-list>
</web-app>
